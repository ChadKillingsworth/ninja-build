#! /usr/bin/env node

var spawn = require('child_process').spawn,
    fs = require('fs');

var log = function (message) {
    process.stderr.write('ninja-build: ' + message + '\n');
}

var copyFile = function (source, target, cb) {
  var cbCalled = false;
  var rd = fs.createReadStream(source);
  rd.on("error", function(err) {
    done(err);
  });
  var wr = fs.createWriteStream(target);
  wr.on("error", function(err) {
    done(err);
  });
  wr.on("close", function(ex) {
    done();
  });
  rd.pipe(wr);
  var done = function (err) {
    if (!cbCalled) {
      cb(err);
      cbCalled = true;
    }
  }
}

var checkNinjaVersion = function (bin, ver, callback) {
    if (!fs.existsSync(bin))
        return callback(false);
    var proc = spawn(bin, ['--version']);
    proc.stdout.on('data', function (data) {
        curVer += data
    });
    proc.on('close', function (code) {
        console.log(curVer);
        return callback(true);
    });
}

var ninja = './ninja',
    ninjaVersion = '1.3.4',
    ninjaBuildFolder = 'ninja-build',
    ninjaUrl = 'git://github.com/martine/ninja.git'

checkNinjaVersion(ninja, ninjaVersion, function (isOk) {
    if (isOk) {
        log('already got ninja, skipping.');
    } else {
        log('downloading ninja...');
        if (fs.existsSync(ninjaBuildFolder))
            fs.unlinkSync(ninjaBuildFolder);
        var proc = spawn('git', ['clone', ninjaUrl, ninjaBuildFolder],
                         {stdio: 'inherit'});
        proc.on('close', function (code) {
            if (code != 0) process.exit(code);
            proc = spawn('git', ['checkout', '-q', 'v' + ninjaVersion],
                         {cwd: ninjaBuildFolder, stdio: 'inherit'});
            proc.on('close', function (code) {
                if (code != 0) process.exit(code);
                log('building ninja...');
                copyFile(ninjaBuildFolder + 'ninja', 'ninja', function(error) {
                    if (error) {
                        log('failed to copy ninja binary');
                        process.exit(1);
                    }
                    fs.unlinkSync(ninjaBuildFolder);
                })
            });
        });
    }
});

